MS1: 
com.github.fenixsoft.bookstore.domain.payment.PaymentService.producePayment(com.github.fenixsoft.bookstore.applicaiton.payment.dto.Settlement)
com.github.fenixsoft.bookstore.domain.payment.Payment.setTotalPrice(java.lang.Double)
com.github.fenixsoft.bookstore.domain.payment.Payment.setExpires(java.lang.Long)
com.github.fenixsoft.bookstore.domain.payment.Payment.setCreateTime(java.util.Date)
com.github.fenixsoft.bookstore.domain.payment.Payment.setPayState(com.github.fenixsoft.bookstore.domain.payment.Payment.State)
com.github.fenixsoft.bookstore.domain.payment.Payment.setPayId(java.lang.String)
com.github.fenixsoft.bookstore.domain.payment.Payment.getPayId()
com.github.fenixsoft.bookstore.domain.payment.Payment.setPaymentLink(java.lang.String)
com.github.fenixsoft.bookstore.domain.payment.Payment.getTotalPrice()
com.github.fenixsoft.bookstore.domain.payment.PaymentService.accomplish(java.lang.String)
com.github.fenixsoft.bookstore.domain.payment.Payment.getPayState()
com.github.fenixsoft.bookstore.domain.payment.PaymentService.accomplishSettlement(com.github.fenixsoft.bookstore.domain.payment.Payment.State,java.lang.String)
com.github.fenixsoft.bookstore.applicaiton.payment.PaymentApplicationService.cancelPayment(java.lang.String)
com.github.fenixsoft.bookstore.domain.payment.PaymentService.cancel(java.lang.String)
com.github.fenixsoft.bookstore.domain.payment.Payment.<init>(java.lang.Double,java.lang.Long)
com.github.fenixsoft.bookstore.domain.payment.PaymentRepository.save(java.lang.Object)
com.github.fenixsoft.bookstore.domain.payment.PaymentRepository.getByPayId(java.lang.String)
com.github.fenixsoft.bookstore.domain.account.Account.getId()
MS2: 
com.github.fenixsoft.bookstore.domain.BaseEntity.getId()
com.github.fenixsoft.bookstore.domain.payment.StockpileService.frozen(java.lang.Integer,java.lang.Integer)
com.github.fenixsoft.bookstore.domain.payment.Stockpile.frozen(java.lang.Integer)
com.github.fenixsoft.bookstore.resource.PaymentResource.updatePaymentState(java.lang.String,com.github.fenixsoft.bookstore.domain.payment.Payment.State)
com.github.fenixsoft.bookstore.domain.payment.StockpileService.decrease(java.lang.Integer,java.lang.Integer)
com.github.fenixsoft.bookstore.domain.payment.Stockpile.decrease(java.lang.Integer)
com.github.fenixsoft.bookstore.domain.payment.StockpileService.thawed(java.lang.Integer,java.lang.Integer)
com.github.fenixsoft.bookstore.domain.payment.Stockpile.thawed(java.lang.Integer)
com.github.fenixsoft.bookstore.applicaiton.ProductApplicationService.getStockpile(java.lang.Integer)
com.github.fenixsoft.bookstore.domain.payment.StockpileService.getByProductId(java.lang.Integer)
com.github.fenixsoft.bookstore.applicaiton.ProductApplicationService.setStockpileAmountByProductId(java.lang.Integer,java.lang.Integer)
com.github.fenixsoft.bookstore.domain.payment.StockpileService.set(java.lang.Integer,java.lang.Integer)
com.github.fenixsoft.bookstore.domain.payment.Stockpile.setAmount(java.lang.Integer)
com.github.fenixsoft.bookstore.domain.payment.StockpileRepository.findById(java.lang.Object)
com.github.fenixsoft.bookstore.domain.payment.StockpileRepository.save(java.lang.Object)
com.github.fenixsoft.bookstore.domain.payment.StockpileService.increase(java.lang.Integer,java.lang.Integer)
com.github.fenixsoft.bookstore.domain.payment.Stockpile.increase(java.lang.Integer)
com.github.fenixsoft.bookstore.resource.ProductResource.queryStockpile(java.lang.Integer)
MS3: 
com.github.fenixsoft.bookstore.domain.account.validation.AccountValidation.isValid(java.lang.Object,javax.validation.ConstraintValidatorContext)
com.github.fenixsoft.bookstore.domain.account.validation.AccountValidation.isValid(com.github.fenixsoft.bookstore.domain.account.Account,javax.validation.ConstraintValidatorContext)
com.github.fenixsoft.bookstore.domain.auth.service.JWTAccessTokenService.<init>(com.github.fenixsoft.bookstore.domain.auth.service.JWTAccessToken,com.github.fenixsoft.bookstore.domain.auth.service.OAuthClientDetailsService,org.springframework.security.authentication.AuthenticationManager)
com.github.fenixsoft.bookstore.domain.auth.service.JWTAccessTokenService.setTokenStore(org.springframework.security.oauth2.provider.token.TokenStore)
com.github.fenixsoft.bookstore.domain.auth.service.JWTAccessTokenService.setClientDetailsService(org.springframework.security.oauth2.provider.ClientDetailsService)
com.github.fenixsoft.bookstore.domain.auth.service.JWTAccessTokenService.setAuthenticationManager(org.springframework.security.authentication.AuthenticationManager)
com.github.fenixsoft.bookstore.domain.auth.service.JWTAccessTokenService.setTokenEnhancer(org.springframework.security.oauth2.provider.token.TokenEnhancer)
com.github.fenixsoft.bookstore.domain.auth.service.JWTAccessTokenService.setAccessTokenValiditySeconds(int)
com.github.fenixsoft.bookstore.domain.auth.service.JWTAccessTokenService.setRefreshTokenValiditySeconds(int)
com.github.fenixsoft.bookstore.domain.auth.service.JWTAccessTokenService.setSupportRefreshToken(boolean)
com.github.fenixsoft.bookstore.domain.auth.service.JWTAccessTokenService.setReuseRefreshToken(boolean)
com.github.fenixsoft.bookstore.domain.payment.validation.SettlementValidator.isValid(java.lang.Object,javax.validation.ConstraintValidatorContext)
com.github.fenixsoft.bookstore.infrastructure.configuration.AuthenticationServerConfiguration.<init>()
com.github.fenixsoft.bookstore.infrastructure.configuration.WebSecurityConfiguration.<init>()
com.github.fenixsoft.bookstore.infrastructure.configuration.AuthenticationServerConfiguration.authenticationManagerBean()
com.github.fenixsoft.bookstore.infrastructure.configuration.WebSecurityConfiguration.authenticationManagerBean()
com.github.fenixsoft.bookstore.domain.account.AccountRepository.findByUsername(java.lang.String)
com.github.fenixsoft.bookstore.domain.account.AccountRepository.delete(java.lang.Object)
com.github.fenixsoft.bookstore.domain.account.AccountRepository.delete(com.github.fenixsoft.bookstore.domain.account.Account)
com.github.fenixsoft.bookstore.domain.account.AccountRepository.save(java.lang.Object)
com.github.fenixsoft.bookstore.domain.account.AccountRepository.save(com.github.fenixsoft.bookstore.domain.account.Account)
com.github.fenixsoft.bookstore.domain.auth.provider.PreAuthenticatedAuthenticationProvider.authenticate(org.springframework.security.core.Authentication)
com.github.fenixsoft.bookstore.domain.auth.AuthenticAccount.isEnabled()
com.github.fenixsoft.bookstore.domain.auth.AuthenticAccount.isCredentialsNonExpired()
com.github.fenixsoft.bookstore.domain.auth.AuthenticAccount.isAccountNonExpired()
com.github.fenixsoft.bookstore.domain.warehouse.ProductRepository.findByIdIn(java.util.Collection)
com.github.fenixsoft.bookstore.domain.warehouse.ProductRepository.findAll()
com.github.fenixsoft.bookstore.domain.warehouse.ProductRepository.findById(java.lang.Object)
com.github.fenixsoft.bookstore.domain.warehouse.ProductRepository.save(java.lang.Object)
com.github.fenixsoft.bookstore.domain.warehouse.ProductRepository.deleteById(java.lang.Object)
com.github.fenixsoft.bookstore.infrastructure.jaxrs.ViolationExceptionMapper.toResponse(java.lang.Throwable)
com.github.fenixsoft.bookstore.infrastructure.jaxrs.ViolationExceptionMapper.toResponse(javax.validation.ConstraintViolationException)
com.github.fenixsoft.bookstore.resource.AdvertisementResource.getAllAdvertisements()
com.github.fenixsoft.bookstore.domain.warehouse.AdvertisementRepository.findAll()
com.github.fenixsoft.bookstore.applicaiton.AccountApplicationService.findAccountByUsername(java.lang.String)
com.github.fenixsoft.bookstore.resource.AccountResource.getUser(java.lang.String)
com.github.fenixsoft.bookstore.resource.ProductResource.getAllProducts()
com.github.fenixsoft.bookstore.resource.ProductResource.getProduct(java.lang.Integer)
com.github.fenixsoft.bookstore.resource.ProductResource.createProduct(com.github.fenixsoft.bookstore.domain.warehouse.Product)
com.github.fenixsoft.bookstore.domain.auth.service.JWTAccessToken.<init>(org.springframework.security.core.userdetails.UserDetailsService)
com.github.fenixsoft.bookstore.domain.auth.service.JWTAccessToken.setSigningKey(java.lang.String)
com.github.fenixsoft.bookstore.domain.auth.service.JWTAccessToken.getAccessTokenConverter()
com.github.fenixsoft.bookstore.domain.payment.WalletRepository.findByAccountId(java.lang.Integer)
com.github.fenixsoft.bookstore.domain.payment.WalletRepository.save(java.lang.Object)
com.github.fenixsoft.bookstore.resource.SettlementResource.executeSettlement(com.github.fenixsoft.bookstore.applicaiton.payment.dto.Settlement)
com.github.fenixsoft.bookstore.infrastructure.jaxrs.AccessDeniedExceptionMapper.toResponse(java.lang.Throwable)
com.github.fenixsoft.bookstore.infrastructure.jaxrs.AccessDeniedExceptionMapper.toResponse(org.springframework.security.access.AccessDeniedException)
com.github.fenixsoft.bookstore.domain.auth.AuthenticAccountRepository.findByUsername(java.lang.String)
com.github.fenixsoft.bookstore.domain.account.Account.getAvatar()
com.github.fenixsoft.bookstore.domain.account.Account.setAvatar(java.lang.String)
com.github.fenixsoft.bookstore.domain.account.Account.getEmail()
com.github.fenixsoft.bookstore.domain.account.Account.setEmail(java.lang.String)
com.github.fenixsoft.bookstore.domain.BaseEntity.setId(java.lang.Integer)
com.github.fenixsoft.bookstore.domain.account.Account.getLocation()
com.github.fenixsoft.bookstore.domain.account.Account.setLocation(java.lang.String)
com.github.fenixsoft.bookstore.domain.account.Account.getName()
com.github.fenixsoft.bookstore.domain.account.Account.setName(java.lang.String)
com.github.fenixsoft.bookstore.domain.account.Account.getPassword()
com.github.fenixsoft.bookstore.domain.account.Account.setPassword(java.lang.String)
com.github.fenixsoft.bookstore.domain.account.Account.getTelephone()
com.github.fenixsoft.bookstore.domain.account.Account.setTelephone(java.lang.String)
com.github.fenixsoft.bookstore.domain.account.Account.getUsername()
com.github.fenixsoft.bookstore.domain.account.Account.setUsername(java.lang.String)
com.github.fenixsoft.bookstore.BookstoreApplication.main(java.lang.String[])
com.github.fenixsoft.bookstore.infrastructure.configuration.JerseyConfiguration.scanPackages(java.lang.String)
com.github.fenixsoft.bookstore.infrastructure.utility.Encryption.passwordEncoder()
com.github.fenixsoft.bookstore.domain.auth.service.OAuthClientDetailsService.init()
com.github.fenixsoft.bookstore.infrastructure.configuration.AuthorizationServerConfiguration.configure(org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer)
com.github.fenixsoft.bookstore.infrastructure.configuration.AuthorizationServerConfiguration.configure(org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer)
com.github.fenixsoft.bookstore.infrastructure.configuration.AuthorizationServerConfiguration.configure(org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer)
com.github.fenixsoft.bookstore.infrastructure.configuration.ResourceServerConfiguration.configure(org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer)
com.github.fenixsoft.bookstore.infrastructure.configuration.ResourceServerConfiguration.configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)
com.github.fenixsoft.bookstore.infrastructure.configuration.AuthenticationServerConfiguration.configure(org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder)
com.github.fenixsoft.bookstore.infrastructure.configuration.WebSecurityConfiguration.configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)
com.github.fenixsoft.bookstore.infrastructure.configuration.WebSecurityConfiguration.configure(org.springframework.security.config.annotation.web.builders.WebSecurity)
com.github.fenixsoft.bookstore.domain.auth.provider.UsernamePasswordAuthenticationProvider.authenticate(org.springframework.security.core.Authentication)
com.github.fenixsoft.bookstore.domain.auth.service.AuthenticAccountDetailsService.loadUserByUsername(java.lang.String)
com.github.fenixsoft.bookstore.domain.auth.AuthenticAccount.getAuthorities()
com.github.fenixsoft.bookstore.domain.auth.service.JWTAccessToken.enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)
com.github.fenixsoft.bookstore.applicaiton.ProductApplicationService.getAllProducts()
com.github.fenixsoft.bookstore.domain.warehouse.ProductService.getAllProducts()
com.github.fenixsoft.bookstore.applicaiton.AccountApplicationService.updateAccount(com.github.fenixsoft.bookstore.domain.account.Account)
com.github.fenixsoft.bookstore.applicaiton.ProductApplicationService.getProduct(java.lang.Integer)
com.github.fenixsoft.bookstore.domain.warehouse.ProductService.getProduct(java.lang.Integer)
com.github.fenixsoft.bookstore.domain.payment.validation.SettlementValidator.isValid(com.github.fenixsoft.bookstore.applicaiton.payment.dto.Settlement,javax.validation.ConstraintValidatorContext)
com.github.fenixsoft.bookstore.applicaiton.payment.dto.Settlement.getItems()
com.github.fenixsoft.bookstore.applicaiton.payment.PaymentApplicationService.executeBySettlement(com.github.fenixsoft.bookstore.applicaiton.payment.dto.Settlement)
com.github.fenixsoft.bookstore.domain.warehouse.ProductService.replenishProductInformation(com.github.fenixsoft.bookstore.applicaiton.payment.dto.Settlement)
com.github.fenixsoft.bookstore.domain.payment.PaymentService.setupAutoThawedTrigger(com.github.fenixsoft.bookstore.domain.payment.Payment)
com.github.fenixsoft.bookstore.domain.payment.Payment.getExpires()
com.github.fenixsoft.bookstore.applicaiton.payment.PaymentApplicationService.accomplishPayment(java.lang.Integer,java.lang.String)
com.github.fenixsoft.bookstore.domain.payment.WalletService.decrease(java.lang.Integer,java.lang.Double)
com.github.fenixsoft.bookstore.domain.payment.Wallet.getMoney()
com.github.fenixsoft.bookstore.domain.payment.Wallet.setMoney(java.lang.Double)
com.github.fenixsoft.bookstore.applicaiton.ProductApplicationService.saveProduct(com.github.fenixsoft.bookstore.domain.warehouse.Product)
com.github.fenixsoft.bookstore.domain.warehouse.ProductService.saveProduct(com.github.fenixsoft.bookstore.domain.warehouse.Product)
com.github.fenixsoft.bookstore.applicaiton.ProductApplicationService.removeProduct(java.lang.Integer)
com.github.fenixsoft.bookstore.domain.warehouse.ProductService.removeProduct(java.lang.Integer)
com.github.fenixsoft.bookstore.applicaiton.AccountApplicationService.createAccount(com.github.fenixsoft.bookstore.domain.account.Account)
com.github.fenixsoft.bookstore.infrastructure.utility.Encryption.encode(java.lang.CharSequence)
com.github.fenixsoft.bookstore.infrastructure.configuration.WebSecurityConfiguration.configure(org.springframework.security.config.annotation.SecurityBuilder)
com.github.fenixsoft.bookstore.infrastructure.configuration.JerseyConfiguration.<init>()
com.github.fenixsoft.bookstore.infrastructure.configuration.JerseyConfiguration.registerClasses(java.util.Set)
com.github.fenixsoft.bookstore.domain.account.Account.<init>()
com.github.fenixsoft.bookstore.domain.BaseEntity.<init>()
com.github.fenixsoft.bookstore.domain.auth.AuthenticAccount.<init>(com.github.fenixsoft.bookstore.domain.account.Account)
com.github.fenixsoft.bookstore.domain.warehouse.Specification.<init>()
com.github.fenixsoft.bookstore.domain.payment.Stockpile.<init>()
com.github.fenixsoft.bookstore.domain.warehouse.Product.<init>()
com.github.fenixsoft.bookstore.domain.payment.Wallet.<init>()
com.github.fenixsoft.bookstore.domain.payment.Payment.<init>()
com.github.fenixsoft.bookstore.domain.warehouse.Advertisement.<init>()
com.github.fenixsoft.bookstore.domain.auth.AuthenticAccount.<init>()
com.github.fenixsoft.bookstore.domain.auth.AuthenticAccount.getId()
MS4: 
com.github.fenixsoft.bookstore.resource.AccountResource.updateUser(com.github.fenixsoft.bookstore.domain.account.Account)
com.github.fenixsoft.bookstore.infrastructure.jaxrs.CommonResponse.op(java.lang.Runnable)
com.github.fenixsoft.bookstore.infrastructure.jaxrs.CommonResponse.op(java.lang.Runnable,java.util.function.Consumer)
com.github.fenixsoft.bookstore.infrastructure.jaxrs.CommonResponse.success()
com.github.fenixsoft.bookstore.infrastructure.jaxrs.CommonResponse.send(javax.ws.rs.core.Response.Status,java.lang.String)
com.github.fenixsoft.bookstore.infrastructure.jaxrs.CodedMessage.setCode(java.lang.Integer)
com.github.fenixsoft.bookstore.infrastructure.jaxrs.CodedMessage.setMessage(java.lang.String)
com.github.fenixsoft.bookstore.resource.PaymentResource.updatePaymentStateAlias(java.lang.String,java.lang.Integer,com.github.fenixsoft.bookstore.domain.payment.Payment.State)
com.github.fenixsoft.bookstore.resource.ProductResource.updateProduct(com.github.fenixsoft.bookstore.domain.warehouse.Product)
com.github.fenixsoft.bookstore.resource.ProductResource.updateStockpile(java.lang.Integer,java.lang.Integer)
com.github.fenixsoft.bookstore.resource.ProductResource.removeProduct(java.lang.Integer)
com.github.fenixsoft.bookstore.resource.AccountResource.createUser(com.github.fenixsoft.bookstore.domain.account.Account)
com.github.fenixsoft.bookstore.infrastructure.jaxrs.BaseExceptionMapper.toResponse(java.lang.Throwable)
com.github.fenixsoft.bookstore.infrastructure.jaxrs.CommonResponse.failure(java.lang.String)
com.github.fenixsoft.bookstore.infrastructure.jaxrs.CodedMessage.<init>(java.lang.Integer,java.lang.String)
